#!/usr/bin/env ruby
# encoding: utf-8

require File.expand_path(File.join(File.dirname(__FILE__), '../config/environment.rb'))

#1 find all objects
#2 for each object find all datastreams
#3 for each datastream find all versions
#3 for each version, see if their last audit was within the threshold, if not audit

$audit_log = nil
$now = DateTime.now
$max_days_between_audits = ScholarSphere::Application.config.max_days_between_audits


def get_or_create_audit_log(version)
  $audit_log = ChecksumAuditLog.where(:pid => version.pid,
                                      :dsid => version.dsid,
                                      :version => version.versionID)
  if $audit_log.empty?
    $audit_log = ChecksumAuditLog.new(:pid => version.pid,
                                      :dsid => version.dsid,
                                      :version => version.versionID) 
  elsif $audit_log.count == 1
    $audit_log = $audit_log[0]
  elsif $audit_log.count > 1
    puts "more than one audit log?  Hrmmm..."
    $audit_log = $audit_log.first
  end
end

def audit_everything
  GenericFile.find(:all).each do |gf|
    gf.datastreams.each do |dsid, ds|
      ds.versions.each do |ver|
        audit(ver) if needs_audit?(ver)
      end
    end
  end
end

def needs_audit?(version)
  get_or_create_audit_log(version)
  if $audit_log and $audit_log.updated_at
    time_since_last_audit = $now - $audit_log.updated_at.to_date
    if time_since_last_audit.to_i < $max_days_between_audits
      puts "No audit needed for #{version.pid} #{version.versionID} (#{$audit_log.updated_at})"
      return false
    end
  end
  puts "Audit needed for #{version.pid} #{version.versionID}"
  true
end

def audit(version)
  if version.dsChecksumValid
    puts "Audit passed for #{version.pid} #{version.versionID}"
    $audit_log.pass = true
  else
    puts "Audit failed for #{version.pid} #{version.versionID}"
    $audit_log.pass = false
  end
  $audit_log.save
end


audit_everything
